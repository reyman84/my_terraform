// Jenkinsfile for vprofile project

pipeline {
    
    agent any
	tools {
	    maven "myMVN"
	    jdk "myJDK"
	}
    environment {
        registryCredential = 'ecr:us-east-1:awscreds'
        appRegistry = "708612169050.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        vprofileRegistry = "https://9708612169050.dkr.ecr.us-east-1.amazonaws.com/"
    }
	
    stages {
	
	    stage ("Fetch Code") {
            steps {
                /*git branch: "atom", url: "https://github.com/hkhcoder/vprofile-project.git" */ // For Nexus Repository
                git branch: "docker", url: "https://github.com/hkhcoder/vprofile-project.git" // For Docker Image
            }
        }
        
        stage ("BUILD") {
            steps {
                sh "mvn clean install -DskipTests"
            }
            post {
                success {
                    echo "Now Archiving..."
                    archiveArtifacts artifacts: "**/target/*.war"
                }
            }
        }
        
        stage ("UNIT TEST") {
            steps {
                sh "mvn test"
            }
        }
        
        stage ("INTEGRATION TEST") {
            steps {
                sh "mvn verify -DskipUnitTests"
            }
        }
		
        stage ("CODE ANALYSIS WITH CHECKSTYLE") {
            steps {
                sh "mvn checkstyle:checkstyle"
            }
            post {
                success {
                    echo "Generated Analysis Result"
                }
            }
        }

        stage("Sonar Code Analysis") {
        	environment {
                scannerHome = tool 'sonar6.2'
            }
            steps {
              withSonarQubeEnv('sonarserver') {
                sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
                }
            }
        }

        // For "atom" branch

        /*stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '10.0.30.226:8081',
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'vprofile-repo',
                  credentialsId: 'nexuslogin',
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
                  ]
                )
            }
        }*/

        // For "docker" branch
        stage('Build App Image') {
          steps {
       
            script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Upload App Image') {
            steps{
                script {
                    docker.withRegistry( vprofileRegistry, registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}